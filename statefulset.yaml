apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  labels: &RabbitMQDeploymentLabels
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/component: rabbitmq-server
spec:
  selector:
    matchLabels: *RabbitMQDeploymentLabels
  serviceName: rabbitmq-discovery
  replicas: 3
  updateStrategy:
      type: RollingUpdate
  template:
    metadata:
      labels: *RabbitMQDeploymentLabels
    spec:
      serviceAccountName: rabbitmq-sa
      terminationGracePeriodSeconds: 180
      initContainers:
      # This init container copies the config files from read-only ConfigMap to writable location.
      - name: copy-rabbitmq-config
        image: rabbitmq:3.11.17
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -euc
        - |
          echo "${RABBITMQ_ERLANG_COOKIE}" >  /var/lib/rabbitmq/.erlang.cookie
          chmod 600 /var/lib/rabbitmq/.erlang.cookie
          cp /rabbitmqconfig/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
          chown :999 /etc/rabbitmq/rabbitmq.conf
          chmod 660 /etc/rabbitmq/rabbitmq.conf
          cp /rabbitmqconfig/enabled_plugins /etc/rabbitmq/enabled_plugins
        volumeMounts:
        - name: configmap
          mountPath: /rabbitmqconfig
        - name: config
          mountPath: /etc/rabbitmq
        - name: rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
        env:
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq-erlang-cookie
      containers:
      - name: rabbitmq
        image: rabbitmq:3.11.17
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: JAVA_OPTS
          value: >-
                -Dlog4j2.formatMsgNoLookups=true
                -Dlog4j2.disable.jmx=true
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RABBITMQ_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: 'true'
        - name: RABBITMQ_NODENAME
          value: 'rabbit@$(MY_POD_NAME).rabbitmq-discovery.$(RABBITMQ_POD_NAMESPACE).svc.cluster.local'
        - name: K8S_SERVICE_NAME
          value: 'rabbitmq-discovery'
        - name: K8S_HOSTNAME_SUFFIX
          value: '.rabbitmq-discovery.$(RABBITMQ_POD_NAMESPACE).svc.cluster.local'
        - name: RABBITMQ_DEFAULT_USER
          value: 'rabbit'
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq-password
        ports:
        - name: clustering
          containerPort: 25672
        - name: amqp
          containerPort: 5672
        - name: amqp-ssl
          containerPort: 5671
        - name: http
          containerPort: 15672
        volumeMounts:
        - name: config
          mountPath: /etc/rabbitmq
        - name: rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics 
            - '-q'
            - ping
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 60
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics 
            - '-q' 
            - ping
          initialDelaySeconds: 20
          timeoutSeconds: 30
          periodSeconds: 60
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for the RabbitMQ to be ready.
                until rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms; do
                  sleep 5
                done

                # By default, RabbitMQ does not have Highly Available policies enabled,
                # using the following command to enable it.#if you're using quorum queues then you don't need to set this policy.
                #automatic replication will happen if u work with quorum queues,u need to create ha policy for classic queues.
                rabbitmqctl set_policy ha-all "." '{"ha-mode":"all", "ha-sync-mode":"automatic"}' --apply-to all --priority 0
      
      volumes:
      - name: configmap
        configMap:
          name: rabbitmq-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
      - name: config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-pvc
      labels: *RabbitMQDeploymentLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
